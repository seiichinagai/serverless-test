{"version":3,"sources":["Form.js","Response.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","response","url","handleSubmit","bind","handleChange","event","inputValue","target","value","stateField","name","this","setState","console","log","a","preventDefault","axios","post","res","Response","onSubmit","type","onChange","Component","text","App","ref","window","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAuDeA,E,kDAnDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,GACVC,IAAK,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPL,E,gDAUnB,SAAaE,GACT,IAAMC,EAAaD,EAAME,OAAOC,MAC1BC,EAAaJ,EAAME,OAAOG,KAChCC,KAAKC,SAAL,eACKH,EAAaH,IAElBO,QAAQC,IAAIH,KAAKZ,S,iEAErB,WAAmBM,GAAnB,iBAAAU,EAAA,6DACIV,EAAMW,iBACEf,EAAQU,KAAKZ,MAAME,IAAnBA,IAFZ,SAGoBgB,IAAMC,KAClB,wEACA,CAAEjB,IAAI,GAAD,OAAKA,KALlB,OAGQkB,EAHR,OAOIC,SAASR,SAAS,CAACZ,SAAUmB,IAE7BN,QAAQC,IAAIK,GAThB,gD,2EAaA,WACI,OACI,6BACI,0BAAME,SAAUV,KAAKT,cACjB,uCACA,2BACIoB,KAAK,OACLZ,KAAK,MACLa,SAAUZ,KAAKP,aACfI,MAAOG,KAAKZ,MAAME,MAGtB,4BAAQqB,KAAK,UAAb,iBAEFX,KAAKZ,MAAMC,c,GA9CVwB,aCYJJ,E,kDAZX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,EAAKF,MAAM2B,MAHV,E,0CAOnB,WACI,OAAOd,KAAKZ,MAAMC,a,GATHwB,aCkBRE,E,4JAfX,WACI,OACI,6BACI,wDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUC,IACN,SAAAP,GACIQ,OAAOR,SAAWA,U,GARxBI,aCQEK,QACa,cAA7BD,OAAOE,SAASC,UAEa,UAA7BH,OAAOE,SAASC,UAEhBH,OAAOE,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.74292c52.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            response: '',\n            url: ''\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        const inputValue = event.target.value;\n        const stateField = event.target.name;\n        this.setState({\n            [stateField]: inputValue,\n        });\n        console.log(this.state);\n    }\n    async handleSubmit(event) {\n        event.preventDefault();\n        const { url } = this.state.url;\n        let res = await axios.post(\n            'https://qeqj4zej8c.execute-api.us-west-2.amazonaws.com/dev/open-pulls',\n            { url: `${url}` }\n        );\n        Response.setState({response: res})\n        // this.setState({ response: res});\n        console.log(res)\n        // return await res.json();\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>URL:</label>\n                    <input\n                        type=\"text\"\n                        name=\"url\"\n                        onChange={this.handleChange}\n                        value={this.state.url}\n                    />\n\n                    <button type=\"submit\">Get Open PRs</button>\n                </form>\n                { this.state.response }\n            </div>\n        );\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\n\nclass Response extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            response: this.props.text\n        }\n    }\n\n    render() {\n        return this.state.response;\n    }\n}\n\nexport default Response;","import React, { Component } from 'react';\nimport Form from './Form.js';\nimport Response from './Response.js';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Leave your message here:</h1>\n                <Form />\n                <Response ref={\n                    Response => {\n                        window.Response = Response\n                    }\n                }/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}